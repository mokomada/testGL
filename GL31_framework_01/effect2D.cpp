//=============================================================================
//
//	タイトル	ヘッダファイル(2DEffect.cpp)
//	ファイル名	2DEffect.h
//	作成者		AT13A284_20 君島弥範
//	作成日		2016/11/21
//
//=============================================================================
//=============================================================================
//	インクルードヘッダ
//=============================================================================
#include "main.h"
#include "manager.h"
#include "rendererGL.h"
#include "effect2D.h"

//=============================================================================
//	関数名	:CSceneBillboard()
//	引数	:無し
//	戻り値	:無し
//	説明	:コンストラクタ。
//=============================================================================
CEffect2D::CEffect2D(int priority, OBJTYPE objType)
{
	glMatrixIdentity(&m_mtxWorld);
}

//=============================================================================
//	関数名	:~CSceneBillboard()
//	引数	:無し
//	戻り値	:無し
//	説明	:デストラクタ。
//=============================================================================
CEffect2D::~CEffect2D()
{

}

//=============================================================================
//	関数名	:Init
//	引数	:VECTOR3 pos(初期位置)
//	戻り値	:無し
//	説明	:初期化処理を行うと共に、初期位置を設定する。
//=============================================================================
void CEffect2D::Init(VECTOR3 pos, VECTOR2 size, EFFECTTYPE etype)
{
	////	ローカル変数
	/////////////////////////////////////////////////////////////
	CRendererGL	*renderer = CManager::GetRendererGL();

	////	各種初期設定
	/////////////////////////////////////////////////////////////
	
	SetPos(VECTOR3(pos.x, pos.y, pos.z));	// 中心点座標
	SetRot(VECTOR3(0.0f, 0.0f, 0.0f));		// 回転角度
	m_Size		= size;						// 拡大倍率
	m_nAnimCntX = 0;						// 現在のアニメーションのXの位置	
	m_nAnimCntY = 0;						// 現在のアニメーションのYの位置
	m_nAnimChangeFrameCnt = 0;				// アニメーション切り替えまでのフレームカウンタ
	m_bEndflug = false;						// 自殺フラグ

	////	エフェクトタイプ別初期化処理
	/////////////////////////////////////////////////////////////
	switch(etype)
	{
		// タイプなし
		case ETYPE_NONE :
			break;

		// 爆発エフェクト 4x4 (テスト用)
		case ETYPE_EXPLODE00 :
			m_Texture = renderer->CreateTextureTGA(EXPLODE_TEXFILENAME000);	// 画像のアドレス(ヘッダに定義)
			m_nAnimX = EXPLODE00_X;											// Xの分割数(ヘッダに定義)
			m_nAnimY = EXPLODE00_Y;											// Yの分割数(ヘッダに定義)
			break;

		// 爆発エフェクト 7x1 (テスト用)
		case ETYPE_EXPLODE01 :
			m_Texture = renderer->CreateTextureTGA(EXPLODE_TEXFILENAME001);	// 画像のアドレス(ヘッダに定義)
			m_nAnimX = EXPLODE01_X;											// Xの分割数(ヘッダに定義)
			m_nAnimY = EXPLODE01_Y;											// Yの分割数(ヘッダに定義)
			break;
			
		// 数字画像(横一列画像テスト用)
		case ETYPE_NUMBER :
			m_Texture = renderer->CreateTextureTGA(NUMBER_TEXFILENAME0000);	// 画像のアドレス(ヘッダに定義)
			m_nAnimX = NUMBER_X;											// Xの分割数(ヘッダに定義)
			m_nAnimY = NUMBER_Y;											// Yの分割数(ヘッダに定義)
			break;
	}
}

//=============================================================================
//	関数名	:Uninit
//	引数	:無し
//	戻り値	:無し
//	説明	:終了処理を行う。
//=============================================================================
void CEffect2D::Uninit(bool isLast)
{
	////	テクスチャ削除
	/////////////////////////////////////////////////////////////
	if(m_Texture != NULL)
	{
		if(isLast)
		glDeleteTextures(1, ((GLuint *)m_Texture));
	}
}

//=============================================================================
//	関数名	:Update
//	引数	:無し
//	戻り値	:無し
//	説明	:更新処理を行う。
//=============================================================================
void CEffect2D::Update(void)
{
	/* 一定フレーム数経過 */
	if(m_nAnimChangeFrameCnt == ANIMATION_CHANGE_FRAME_COUNT)
	{
		////	アニメーション切り替え用フレームカウンタをリセット
		/////////////////////////////////////////////////////////////////
		m_nAnimChangeFrameCnt = 0;
		
		////	X軸のアニメーションカウンタを加算
		/////////////////////////////////////////////////////////////////
		m_nAnimCntX++;
		
		////	X軸のアニメーションカウンタが定数を超えた場合の処理
		/////////////////////////////////////////////////////////////////
		if(m_nAnimCntX == m_nAnimX)
		{
			// X軸のアニメーションカウンタをリセット
			m_nAnimCntX = 0;
		
			// Y軸のアニメーションカウンタを加算
			m_nAnimCntY++;
		}

		////	Y軸のアニメーションカウンタが定数を超えた場合
		/////////////////////////////////////////////////////////////////
		if(m_nAnimCntY == m_nAnimY)
		{
			// 終了フラグをたてる。
			m_bEndflug = true;
		}
	}

	////	アニメーション切り替え用フレームカウンタ加算
	/////////////////////////////////////////////////////////////////
	m_nAnimChangeFrameCnt++;

	////	終了フラグが立っている場合の処理
	/////////////////////////////////////////////////////////////////
	if(m_bEndflug)
	{
		// 終了処理
		Release();
	}
}

//=============================================================================
//	関数名	:Draw
//	引数	:無し
//	戻り値	:無し
//	説明	:描画処理を行う。
//=============================================================================
void CEffect2D::Draw(void)
{
	////	モデルビュー変換行列の操作用
	/////////////////////////////////////////////////////////////
	GLdouble m[16];

	////	モデルビューマトリクスの設定
	/////////////////////////////////////////////////////////////
	glMatrixMode(GL_MODELVIEW);

	////	マトリクスの退避
	/////////////////////////////////////////////////////////////
	glPushMatrix();


	////	ワールドマトリクスの設定
	/////////////////////////////////////////////////////////////
	glTranslatef(m_Pos.x, m_Pos.y, m_Pos.z);
	glScalef(1.0f, 1.0f, 1.0f);

	// 現在のモデルビュー変換行列を取り出す
	glGetDoublev(GL_MODELVIEW_MATRIX, m);

	// 左上 3x3 要素を単位行列にする
	m[0] = m[5] = m[10] = 1.0;
	m[1] = m[2] = m[4] = m[6] = m[8] = m[9] = 0.0;

	// 書き換えた行列を書き戻す
	glLoadMatrixd(m);

	////	描画処理
	/////////////////////////////////////////////////////////////

		////	各種描画設定
		/////////////////////////////////////////////////////////
		glBindTexture(GL_TEXTURE_2D, m_Texture);			// テクスチャバインド
		glEnable(GL_TEXTURE_2D);							// テクスチャ有効化
		glEnable(GL_DEPTH_TEST);							// 深度バッファ設定
		glDisable(GL_LIGHTING);								// ライティングオフ
		glEnable(GL_BLEND);									// ブレンド有効化
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);	// αブレンド設定

		////	描画開始
		/////////////////////////////////////////////////////////
		glBegin(GL_TRIANGLE_STRIP);
		{
			// 頂点色設定
			glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

			// 描画関数呼び出し
			DrawPolygon();
		}

		////	描画終了
		/////////////////////////////////////////////////////////
		glEnd();


	////	各種設定引き戻し
	/////////////////////////////////////////////////////////////
	glEnable(GL_LIGHTING);			// ライティングON
	glDisable(GL_TEXTURE_2D);		// テクスチャ無効
	glDisable(GL_DEPTH_TEST);		// 深度バッファ設定オフ
	glDisable(GL_BLEND);			// αブレンドOFF
	
	////	モデルビューマトリックスの設定
	/////////////////////////////////////////////////////////////
	glMatrixMode(GL_MODELVIEW);
	
	////	保存マトリックスの取り出し
	/////////////////////////////////////////////////////////////
	glPopMatrix();
}


//=============================================================================
//	関数名	:DrawPolygon
//	引数	:無し
//	戻り値	:無し
//	説明	:ポリゴンの頂点情報をセットする。
//=============================================================================
void CEffect2D::DrawPolygon(void)
{
	////	描画用の法線・テクスチャ座標・頂点座標設定
	/////////////////////////////////////////////////////////////

	// 左上
	glNormal3f(0.0f, 1.0f, 0.0f);														// 法線ベクトル	
	glTexCoord2d(float((1.0f / m_nAnimX) * m_nAnimCntX),								// テクスチャ座標X(U)
				 float(1.0f - (1.0f / m_nAnimY * m_nAnimCntY)));						// テクスチャ座標X(V)
	glVertex3f((m_Pos.x - (m_Size.x * 0.5f)), (m_Pos.y + (m_Size.y * 0.5f)), m_Pos.z);	// 頂点座標

	// 右上
	glNormal3f(0.0f, 1.0f, 0.0f);														// 法線ベクトル	
	glTexCoord2d(float((1.0f / m_nAnimX) * (m_nAnimCntX + 1)),							// テクスチャ座標X(U)
				 float(1.0f - (1.0f / m_nAnimY * m_nAnimCntY)));						// テクスチャ座標X(V)
	glVertex3f((m_Pos.x + (m_Size.x * 0.5f)), (m_Pos.y + (m_Size.y * 0.5f)), m_Pos.z);	// 頂点座標
																						
	// 左下
	glNormal3f(0.0f, 1.0f, 0.0f);														// 法線ベクトル	
	glTexCoord2d(float((1.0f / m_nAnimX) * m_nAnimCntX),								// テクスチャ座標X(U)
				 float(1.0f - (1.0f / m_nAnimY * (m_nAnimCntY + 1))));					// テクスチャ座標X(V)
	glVertex3f((m_Pos.x - (m_Size.x * 0.5f)), (m_Pos.y - (m_Size.y * 0.5f)), m_Pos.z);	// 頂点座標
																						
	// 右下
	glNormal3f(0.0f, 1.0f, 0.0f);														// 法線ベクトル	
	glTexCoord2d(float((1.0f / m_nAnimX) * (m_nAnimCntX + 1)),							// テクスチャ座標X(U)
				 float(1.0f - (1.0f / m_nAnimY * (m_nAnimCntY + 1))));					// テクスチャ座標X(V)
	glVertex3f((m_Pos.x + (m_Size.x * 0.5f)), (m_Pos.y - (m_Size.y * 0.5f)), m_Pos.z);	// 頂点座標
}																						

//=============================================================================
//	関数名	:Create
//	引数	:VECTOR3 pos(初期位置)
//	戻り値	:無し
//	説明	:インスタンス生成を行うと共に、初期位置を設定する。
//=============================================================================
CEffect2D *CEffect2D::Create(VECTOR3 pos, VECTOR2 size, EFFECTTYPE etype)
{
	CEffect2D *effect;

	effect = new CEffect2D;

	effect->Init(pos, size, etype);

	return effect;
}

